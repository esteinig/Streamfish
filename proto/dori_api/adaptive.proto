syntax="proto3";

package dori_api.adaptive;

import "minknow_api/data.proto";

// Basecall reads streamed from the Streamfish::ReadUntilClient
//
// Since 1.0
service AdaptiveSampling {
  
  rpc Cache(stream StreamfishRequest) returns (stream StreamfishResponse) { }

  // A version of the Dorado pipeline that implements single chunk stream logic which is
  // leaner and has less latency than the cached version, but may require improvements
  // in processing basecalled sequences for decision making due to smaller alignments
  // - this is mainly for comparison to the cached version and running experiments
  // leading up to the signal classification implementation 
  rpc Stream(stream StreamfishRequest) returns (stream StreamfishResponse) { }

}


enum RequestType {
  INIT = 0;
  DATA = 1;
}


enum Decision {
  PROCEED = 0;
  STOP_DATA = 1;
  UNBLOCK = 2;
  NONE = 3;
}

// Streaming by channel
message StreamfishRequest {
  
  // Type of request being made
  RequestType request = 1;

  // Data for a particular channel
  bytes data = 2;

  // Channel for cache request
  uint32 channel = 3;

  // Number for cache request
  uint32 number = 4;

  // Read identifier
  string id = 5;

}

message StreamfishResponse { 

  // The number of the read in the channel returned in `minknow_api.data.GetLiveReadsResponse.ReadData.number` 
  uint32 number = 1;

  // The channel of the read returned in `minknow_api.data.GetLiveReadsResponse.ReadData.channels` 
  uint32 channel = 2;

  // Action decision for client to act on
  Decision decision = 3;

}