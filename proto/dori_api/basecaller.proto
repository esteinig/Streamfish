syntax="proto3";

package dori_api.basecaller;


// Basecall reads streamed from the Reefsquid::ReadUntilClient
//
// This service implements a single endpoint to basecall reads with Dorado, because
// there is not avilable server implementation (for now) and it is not clear if the 
// proposed "drop-in" for Dorado that works with the current Guppy server APIs from
// ONT is going to be more transparent in how things work.enum
//
// The idea behind this is that we build a bi-directional streaming endpoint that
// runs a modified version of Dorado that takes in raw data from the endpoint in
// and open pipe STDIN and processes reads as they arrive in the stream - this is
// different than the batch-wise implementation for example in Readfish and the
// ONT ReadUntil implementation.enum
//
// Since 1.0
service Basecaller {
  
  //
  rpc BasecallDorado(stream BasecallerRequest) returns (stream BasecallerResponse) { }

}

message BasecallerRequest {
  
  // The ID of the read returned in `minknow_api.data.GetLiveReadsResponse.ReadData` 
  string id = 1;

  // The number of the read in the channel returned in `minknow_api.data.GetLiveReadsResponse.ReadData.number` 
  uint32 number = 2;

  // The channel of the read returned in `minknow_api.data.GetLiveReadsResponse.ReadData.channels` 
  uint32 channel = 3;

  // Array of raw data values returned in `minknow_api.data.GetLiveReadsResponse.ReadData` 
  //
  // Raw data values must be UNCALIBRATED as set in `minknow_api.data.GetLiveReadsRequest.RawDataType` 
  bytes data = 4;

}

message BasecallerResponse { 

  enum PipelineStage {
    BASECALLER_INPUT = 0;
    BASECALLER_CLASSIFIER = 1;
    CLASSIFIER_OUTPUT = 2;
  }

  // The ID of the read returned in `minknow_api.data.GetLiveReadsResponse.ReadData` 
  string id = 1;

  // The number of the read in the channel returned in `minknow_api.data.GetLiveReadsResponse.ReadData.number` 
  uint32 number = 2;

  // The channel of the read returned in `minknow_api.data.GetLiveReadsResponse.ReadData.channels` 
  uint32 channel = 3;

  PipelineStage stage = 4;

  

}