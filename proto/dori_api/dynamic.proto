syntax="proto3";

package dori_api.dynamic;

// Dynamic feedback analysis routines interacting with the AdaptiveSamplingService server implemented in `Streamfish::DoriServer`
//
// Service implements endpoints that run "slow real-time" analysis pipelines whose results inform changes to the
// experiment configuration, for example changing the targets of an adaptive sampling routine
//
// This service provides the "dynamic adaptive sampling" logic for the adaptive sampling routine as described in Readfish
//
// Since 1.0
service DynamicFeedback {

    // Tests dynamic adaptive sampling by changing the mapping target of the 
    // current experimental configuration.
    rpc Test(stream DynamicFeedbackRequest) returns (stream DynamicFeedbackResponse) { }

    // // Dynamic assembly of sequences - this endpoint takes the array of read
    // // identifiers and continuously assembles the provided reads from the 
    // // completed read outputs of the control server. It then assesses whether
    // // an assembly can be 
    // rpc Assembly(stream DynamicFeedbackRequest) returns (stream DynamicFeedbackResponse) { }
  
  
}
  

// ========
// Messages
// ========


// We want to maintain consistency between all RPC endpoints to send the 
// same request Request and Responses - that way we can switch more easily 
// between different dynamic analysis pipelines.
//
// We are not limited by performance or latency this time, so the 
// size of messages and data types are not a primary consideration

enum RequestType {
    INIT = 0;
    DATA = 1;
}

message DynamicFeedbackRequest {

    // Request type
    RequestType request = 1;

    // Array of targets from current experimental configuration
    repeated DynamicTarget targets = 2;

    // Array of read identifiers for one or more configured decisions
    // to be included in pipelines, for example to focus assembly on 
    // all non-unblocked reads
    repeated string reads = 3;
   
}

message DynamicFeedbackResponse { 

    // Array of updated targets for experimental configuration change
    repeated DynamicTarget targets = 1;

}

// Mirrors the `Target` struct in `streamfish::config`
message DynamicTarget {

    // Name of target sequence in alignment index
    string reference = 1;

    // Optional start of target region (1-based, closed)
    optional int32 start = 2;

    // Optional end of target region (1-based, closed)
    optional int32 end = 3;

    // Optional name of the target (currently not used)
    optional string name = 4;

    // Path to the dynamic controller alignment index for this target
    optional string alignment_index = 5;

    // Path to the dynamic controller alignment index for this target
    optional int32 channel_start = 6;

    // Path to the dynamic controller alignment index for this target
    optional int32 channel_end = 7;

}