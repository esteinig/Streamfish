version: "3.8"

services:

  # This builds a development container which mirrors the repository 
  # for cargo-watch auto-building on every change during development.
  #
  # We must build the containers with the UID and GID specified in the environment file
  # and run the containers with these variables as well - this allows permissions to be
  # shared correctly between user and host
  #
  # docker-compose --env-file .env -f docker-compose.yml --profile dev --project-name <project> up [--build]
  
  # This development container requires MinKNOW to run on the host, it will
  # map the host ports into the container on `minknow_host` so that we can
  # connect to the MinKNOW API. This requires to set the configuration 
  # environmental variable:
  #
  # STREAMFISH_MINKNOW_HOST=minknow_host
  #
  # This is done here with the environment variable which overrides the
  # configuration file (.env) from the shared directory tree.
  #
  # At the moment the setup requires the ReadUntil client to run on the
  # host - this is due to mounting the UDS path for the Dori connection
  # into the container from the host to enable faster data transfer!

  streamfish-dev:
    profiles:
      - dev
      - streamfish
      - minknow
    image: streamfish:latest
    build:
      context: .
      dockerfile: Dockerfile.dev
      args:
        - "UID=${UID:-1000}"
        - "GID=${GID:-1000}"
        - "USERNAME=${USERNAME:-streamfish}"
    environment:
      - STREAMFISH_MINKNOW_HOST=minknow_host  # overrides env file at runtime
    extra_hosts:
      - "minknow_host:host-gateway"
    networks:
      - streamfish
    volumes:
      - ../:/usr/src/streamfish
      - streamfish:/opt/streamfish/bin
      - /opt/ont/minknow/conf/rpc-certs/:/opt/ont/minknow/conf/rpc-certs/
    command: cargo watch -w src -w proto -w build.rs -w Cargo.toml -x "build --target x86_64-unknown-linux-musl --release -j4 && if [ -f /opt/streamfish/bin/streamfish ]; then rm /opt/streamfish/bin/streamfish; fi && cp /usr/src/streamfish/target/x86_64-unknown-linux-musl/release/streamfish /opt/streamfish/bin/"
    depends_on:
      change-vol-ownership:
        # Wait for the ownership to change
        condition: service_completed_successfully

  # Dori container with mounted host paths and ports

  # Note that when the GPU does not have sufficient free memory (hard to tell how much) for example
  # when `guppy_basecall_server` is running concurrently, then Dorado basecalling may result in weird 
  # CUDA and segfaults - these are usually fixed by clearing the stupid auto-run of Guppy from the GPU
  # and making memory available (tested on a RTX 3060 Driver: 470.182.03 with CUDNN8 and CUDA 11.4.3)

  # In fact it seems unrelated to GPU MEM usage? Errors can occur on intitial execution of Dorado,
  # something causes this to be unstable. I can't pinpoint it because it seems to occurr randomly,
  # usually after starting the container, and then disappears after a couple of test runs? Might
  # just not be very stable on my GPU

  # This container must be run with correct host user permissions ecause running the server inside
  # creates the UDS path that should be accessible for the streamfish readuntil client which is
  # excuted on host
  
  dori-dev:
    profiles:
      - dev
      - streamfish
      - minknow
    image: doradori:latest   
    build:
      context: .
      dockerfile: Dockerfile.doradori.dev
      args:
        - "UID=${UID:-1000}"
        - "GID=${GID:-1000}"
        - "USERNAME=${USERNAME:-streamfish}"
    environment:
      - STREAMFISH_MINKNOW_HOST=minknow_host                                                # access to host ports
    extra_hosts:
      - "minknow_host:host-gateway"                                                         # access to host ports
    ports:
      - "10002:10002"                                                                       # port forward of dori tcp port [default]
    networks:
      - streamfish
    volumes:
      - /tmp:/tmp                                                                           # access to dori uds socket from host streamfish client at minimum use ssd 
      - ../:/usr/src/streamfish                                                             # access to development files and config, working dir inside container
      - streamfish:/opt/streamfish/bin                                                      # access to development streamfish executable from streamfish-dev
      - /opt/ont/minknow/conf/rpc-certs/:/opt/ont/minknow/conf/rpc-certs/                   # access to minknow tls certificate
      - /data/dev/meta-gp/forks/dorado/:/data/dev/meta-gp/forks/dorado                      # access to dorado fork for modification testing
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    tty: true
    depends_on:
      change-vol-ownership:
        # Wait for the ownership to change
        condition: service_completed_successfully

  # A reimplementation of the Icarust container for local development and streamlining
  #
  # cd /data/dev/meta-gp/forks/icarust && /data/dev/meta-gp/forks/icarust/target/release/icarust -c /streamfish/configs/icarust/test.ini -v -s /streamfish/configs/icarust/test.toml

  icarust-dev:
    profiles:
      - dev
      - streamfish
      - icarust
    image: icarust:latest   
    build:
      context: .
      dockerfile: Dockerfile.icarust.dev
      args:
        - "UID=${UID}"
        - "GID=${GID}"
        - "USERNAME=${USERNAME}"
    tty: true
    environment:
      - STREAMFISH_ICARUST_HOST=icarust_host                                                # access to icarust ports through host - see if they are accessible on docker network
    extra_hosts:
      - "icarust_host:host-gateway"                                                         # access to icarust ports through host - see if they are accessible on docker network
    ports:
      - "10000:10000"                                                                       # port forward to host - manager port
      - "10001:10001"                                                                       # port forward to host - position port
    networks:
      - streamfish
    volumes:
      - /tmp:/tmp                                                                           # access to dori uds socket from host streamfish client, use ssd access - latency check on resource storage [TODO]
      - /opt/ont/minknow/conf/rpc-certs/:/opt/ont/minknow/conf/rpc-certs/                   # access to minknow tls certificate
      
      - /data/dev/meta-gp/forks/icarust/:/data/dev/meta-gp/forks/icarust                    # access to icarust fork for modification testing

      - /data/dev/meta-gp/forks/icarust/squiggle_arrs:/squiggle_arrs                        # access to squiggle arrays for running
      - /data/dev/meta-gp/forks/icarust/static:/static                                      # access to static data for running
      - /data/dev/meta-gp/forks/icarust/docker/configs:/configs                             # access to icarust configs for running

      - ../configs:/streamfish/configs                                                      # access to streamfish configs for running


  # Fix ownership of shared volume directory to access updated `streamfish` executable on Dori
  change-vol-ownership:
    # We can use any image we want as long as we can chown
    image: ubuntu
    # Need a user priviliged enough to chown
    user: "root"
    # Specify the group in question
    group_add:
      - '${GID}'
    volumes:
      # The volume to chown
      - streamfish:/opt/streamfish/bin   
    command: chown -R ${UID}:${GID} /opt/streamfish/bin 

networks:
  streamfish:

volumes:
  streamfish: