version: "3.8"

services:

  # This builds a development container which mirrors the repository 
  # for cargo-watch auto-building on every change during development
  #
  #   docker-compose -f <compose-file> --profile dev --profile minknow --project-name <project> up <--build>
  #
  # For testing the terminal client while the development container
  # is running enter the running service container with:
  #
  #   docker exec -it <project>-streamfish-dev-1 /bin/bash
  #
  # The compiled executable is copied to /usr/bin and available:
  #
  #   streamfish test --help


  # This development container requires MinKnow to run on the host, it will
  # map the host ports into the container on `minknow_host` so that we can
  # connect to the MinKnow API. This requires to set the configuration 
  # environmental variable:
  #
  # STREAMFISH_MINKNOW_HOST=minknow_host
  #
  # This is done here with the environment variable which overrides the
  # configuration file (.env) from the shared directory tree

  streamfish-dev:
    profiles:
      - dev
      - minknow
    image: streamfish:latest
    build:
      context: ..
      dockerfile: ./docker/Dockerfile.dev
    environment:
      - STREAMFISH_MINKNOW_HOST=minknow_host
    extra_hosts:
      - "minknow_host:host-gateway"
    networks:
      - streamfish
    volumes:
      - ../:/usr/src/streamfish
      - /opt/ont/minknow/conf/rpc-certs/:/opt/ont/minknow/conf/rpc-certs/
    command: cargo watch -w src -w proto -w build.rs -w Cargo.toml -x "build --target x86_64-unknown-linux-musl --release -j4 && cp /usr/src/streamfish/target/x86_64-unknown-linux-musl/release/streamfish /usr/bin"

  dorado-dev:
    profiles:
      - dev
      - dorado
    image: dorado:latest   
    build:
      context: ..
      dockerfile: ./docker/Dockerfile.dorado.dev
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: bash -c "cmake -S . -B cmake-build && echo 'Running CMAKE buildfer' && cmake --build cmake-build --config Release -j4 && cmake --install cmake-build --prefix /opt && tail -f /dev/null"
    volumes:
      - ../dorado:/usr/src/streamfish/dorado

networks:
  streamfish: