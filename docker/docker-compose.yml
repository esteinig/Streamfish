version: "3.8"

services:

  # This builds a development container which mirrors the repository 
  # for cargo-watch auto-building on every change during development.
  #
  # We must build the containers with the UID and GID specified in the environment file
  # and run the containers with these variables as well - this allows permissions to be
  # shared correctly between user and host
  #
  # docker-compose --env-file .env -f docker-compose.yml --profile dev --project-name <project> up [--build]
  
  # This development container requires MinKNOW to run on the host, it will
  # map the host ports into the container on `minknow_host` so that we can
  # connect to the MinKNOW API. This requires to set the configuration 
  # environmental variable:
  #
  # STREAMFISH_MINKNOW_HOST=minknow_host
  #
  # This is done here with the environment variable which overrides the
  # configuration file (.env) from the shared directory tree.
  #
  # cd /usr/src/icarust && cargo build --release && ./target/release/icarust -c /usr/src/streamfish/configs/icarust/test.ini -v -s /usr/src/streamfish/configs/icarust/test.toml --data-delay 30 --data-run-time 10

  
  # streamfish-dev:
  #   profiles:
  #     - dev
  #     - streamfish
  #   image: streamfish:latest
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #     args:
  #       - "UID=${UID:-1000}"
  #       - "GID=${GID:-1000}"
  #       - "USERNAME=${USERNAME:-streamfish}"
  #   environment:
  #     - STREAMFISH_MINKNOW_HOST=minknow_host  # overrides env file at runtime
  #   extra_hosts:
  #     - "minknow_host:host-gateway"
  #   # ports:
  #   #   - "${TCP_ICARUST_MANAGER:-10000}:${TCP_ICARUST_MANAGER:-10000}"                       # icarust port forward to host - manager port
  #   #   - "${TCP_ICARUST_POSITION:-10001}:${TCP_ICARUST_POSITION:-10001}"                     # icarust port forward to host - position port
  #   networks:
  #     - streamfish
  #   volumes:
  #     - streamfish:/opt/streamfish/bin

  #     - "${STREAMFISH_REPO_DIR}:/usr/src/streamfish"
      
  #     - "${TEMP_DIR:-/tmp}:/tmp"                                                                             # access to dori uds socket from host streamfish client, use ssd access - latency check on resource storage [TODO]
  #     - "${ONT_CERT_DIR:-/opt/ont/minknow/conf/rpc-certs}:/opt/ont/minknow/conf/rpc-certs"
        
  #     - "${ICARUST_REPO_DIR}:/usr/src/icarust"                                      # access to icarust fork for modification testing
  #     - "${ICARUST_REPO_DIR}/squiggle_arrs:/squiggle_arrs"                          # access to squiggle arrays for running
  #     - "${ICARUST_REPO_DIR}/static:/static"                                        # access to static data for running
  #     - "${ICARUST_REPO_DIR}/docker/configs:/configs"                               # access to icarust configs for running
  #   tty: true
  #   # command: cargo watch -w src -w proto -w build.rs -w Cargo.toml -x "build --target x86_64-unknown-linux-musl --release -j4 && if [ -f /opt/streamfish/bin/streamfish ]; then rm /opt/streamfish/bin/streamfish; fi && cp /usr/src/streamfish/target/x86_64-unknown-linux-musl/release/streamfish /opt/streamfish/bin/"
  #   depends_on:
  #     change-vol-ownership:
  #       # Wait for the ownership to change
  #       condition: service_completed_successfully

  # # Dori container with mounted host paths and ports

  # # This container must be run with correct host user permissions ecause running the server inside
  # # creates the UDS path that should be accessible for the streamfish readuntil client which is
  # # excuted on host

  # # Icarust setup

  # # Server: /opt/streamfish/bin/streamfish -c configs/icarust/streamfish.toml dori-server
  # # Client: /opt/streamfish/bin/streamfish -c configs/icarust/streamfish.toml test-read-until
  
  # dori-dev:
  #   profiles:
  #     - dev
  #     - streamfish
  #     - dori
  #   image: doradori:latest   
  #   build:
  #     context: ..
  #     dockerfile: docker/Dockerfile.doradori.dev
  #     args:
  #       - "UID=${UID:-1000}"
  #       - "GID=${GID:-1000}"
  #       - "USERNAME=${USERNAME:-streamfish}"
  #   environment:
  #     - STREAMFISH_MINKNOW_HOST=minknow_host                                                                              # access to host ports
  #   extra_hosts:
  #     - "minknow_host:host-gateway"                                                                                       # access to host ports
  #   ports:
  #     - "${TCP_DORI_1:-10002}:${TCP_DORI_1:-10002}"                                                                       # port forward of dori tcp port [default]
  #     - "${TCP_DORI_2:-10003}:${TCP_DORI_2:-10003}"                                                                       # port forward of dori tcp port [default]
  #   networks:
  #     - streamfish
  #   volumes:
  #     - streamfish:/opt/streamfish/bin                                                                    # access to development streamfish executable from streamfish-dev

  #     - "${TEMP_DIR:-/tmp}:/tmp"                                                                          # access to dori uds socket from host streamfish client at minimum use ssd 
  #     - "${MINKNOW_CERT_DIR:-/opt/ont/minknow/conf/rpc-certs}:/opt/ont/minknow/conf/rpc-certs"            # access to minknow tls certificate

  #     - "${STREAMFISH_REPO_DIR}:/usr/src/streamfish"                                                      # access to development files and config, working dir inside container
  #     - "${DORADO_REPO_DIR}:/data/dev/meta-gp/forks/dorado"                                               # access to dorado fork for modification testing
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]
  #   tty: true
  #   depends_on:
  #     change-vol-ownership:
  #       # Wait for the ownership to change
  #       condition: service_completed_successfully

  eval-dev:
    profiles:
      - dev
      - streamfish
      - eval
    image: doradori:latest   
    build:
      context: .
      dockerfile: Dockerfile.doradori.dev
      args:
        - "UID=${UID:-1000}"
        - "GID=${GID:-1000}"
        - "USERNAME=${USERNAME:-streamfish}"
    tty: true
    volumes:
      - "${TEMP_DIR:-/tmp}:/tmp"                                                                         
      - "${STORAGE_DIR:-/data}:/data/storage"   
      - "${STREAMFISH_REPO_DIR}:/usr/src/streamfish"                                                      # access to development files and config, working dir inside container
      - "${DORADO_REPO_DIR}:/data/dev/meta-gp/forks/dorado"                                               # access to dorado fork for modification testing
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  icarust-squiggle:
    profiles:
      - dev
      - squiggle
    image: icarust:latest   
    build:
      context: .
      dockerfile: Dockerfile.icarust.dev
      args:
        - "UID=${UID:-1000}"
        - "GID=${GID:-1000}"
        - "USERNAME=${USERNAME:-streamfish}"
    tty: true
    volumes:
      - "${TEMP_DIR:-/tmp}:/tmp"                                                                       
      - "${ICARUST_REPO_DIR}:/usr/src/icarust"                                                           # access to development files and config, working dir inside container
      - "${STREAMFISH_REPO_DIR}:/usr/src/streamfish"
      
  # Fix ownership of shared volume directory to access updated `streamfish` executable on Dori
  change-vol-ownership:
    # We can use any image we want as long as we can chown
    image: ubuntu
    # Need a user priviliged enough to chown
    user: "root"
    # Specify the group in question
    group_add:
      - '${GID}'
    volumes:
      # The volume to chown
      - streamfish:/opt/streamfish/bin   
    command: chown -R ${UID}:${GID} /opt/streamfish/bin 

networks:
  streamfish:

volumes:
  streamfish:
